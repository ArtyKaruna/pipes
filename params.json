{"name":"Pipes","tagline":"A collection of pipes for Angular apps","body":"![npm](https://img.shields.io/npm/v/@nglrx/pipes?label=npm)\r\n![GitHub last commit](https://img.shields.io/github/last-commit/nglrx/pipes)\r\n![Libraries.io dependency status for latest release, scoped npm package](https://img.shields.io/librariesio/release/npm/@nglrx/pipes)\r\n[![Build Status](https://travis-ci.org/nglrx/pipes.svg?branch=master)](https://travis-ci.org/nglrx/pipes)\r\n[![codecov](https://codecov.io/gh/nglrx/pipes/branch/master/graph/badge.svg)](https://codecov.io/gh/nglrx/pipes)\r\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=nglrx_pipes&metric=alert_status)](https://sonarcloud.io/dashboard?id=nglrx_pipes)\r\n![npm](https://img.shields.io/npm/dm/@nglrx/pipes)\r\n![GitHub](https://img.shields.io/github/license/nglrx/pipes?color=blue)\r\n\r\n# @nglrx/pipes\r\n\r\nA collection of pipes for Angular apps.\r\n\r\n## Installation\r\n\r\nUse [npm](https://www.npmjs.com/) to install  @nglrx/pipes.\r\n\r\n```bash\r\nnpm i @nglrx/pipes\r\n```\r\n\r\n## Import Module\r\n\r\nImport module `NglrxPipesModule` to your module for using all pipes.\r\n\r\n```typescript\r\nimport { NglrxPipesModule } from '@nglrx/pipes';\r\n\r\n@NgModule({\r\n  //...\r\n  imports: [\r\n    NglrxPipesModule\r\n  ]\r\n})\r\nexport class YourModule { }\r\n```\r\n\r\nAlternatively, you can use pipes from specific module(s) like `NglrxNumberPipesModule` or `NglrxStringPipesModule`.\r\n\r\n## Usage of Pipes\r\n\r\nPipes can be used in your component's *template*\r\n\r\n```html\r\n{{ 'This-is-a-string' | length }}\r\n<!-- Returns 16 -->\r\n```\r\n\r\nThey can also be *chained*\r\n\r\n```html\r\n{{ '  Another-string  ' | trim | length }}\r\n<!-- Returns 14 -->\r\n```\r\n\r\nOr they can be used within *components* or *services* by calling the `transform` method\r\n\r\n```typescript\r\nimport { LengthPipe } from '@nglrx/pipes';\r\n\r\n@Component({\r\n  providers: [ LengthPipe ]\r\n})\r\nexport class YourComponent {\r\n  \r\n  constructor(private lengthPipe: LengthPipe) {\r\n    this.lengthPipe.transform('Yet-another-string'); // Returns 18\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Library of Pipes\r\n\r\n- [String Pipes](#string-pipes)\r\n  - [camelCase](#camelcase)\r\n  - [charAt](#charat)\r\n  - [lowerCase](#lowercase)\r\n  - [pascalCase](#pascalcase)\r\n  - [sentenceCase](#sentencecase)\r\n  - [slugify](#slugify)\r\n  - [split](#split)\r\n  - [titleCase](#titlecase)\r\n  - [trim](#trim)\r\n  - [trimLeft](#trimleft)\r\n  - [trimRight](#trimright)\r\n  - [upperCase](#uppercase)\r\n- [Number Pipes](#number-pipes)\r\n  - [abs](#abs)\r\n  - [avg](#avg)\r\n  - [max](#max)\r\n  - [min](#min)\r\n  - [sum](#sum)\r\n- [Generic Pipes](#generic-pipes)\r\n  - [length](#length)\r\n  - [reverse](#reverse)\r\n\r\n\r\n## String Pipes\r\n\r\nA collection of pipes exported by `NglrxStringPipesModule`.\r\n\r\n\r\n### camelCase\r\n\r\nConverts a string to camel case and strips hyphens, underscores and whitespaces.\r\n\r\nUsage: `string | camelCase`\r\n\r\n```html\r\n{{ 'Convert_to camel-case' | camelCase }}\r\n<!-- Returns 'convertToCamelCase' -->\r\n```\r\n\r\n\r\n### charAt\r\n\r\nReturns the character value at given position in a string.\r\n\r\nUsage: `string | charAt[:position]`\r\n\r\nRange of position is from 0 (default) to n-1, where n is length of the string.\r\n\r\n```html\r\n{{ 'This is a sample string.' | charAt:12 }}\r\n<!-- Returns 'm' -->\r\n```\r\n\r\n\r\n### lowerCase\r\n\r\nConverts a given string to lower case.\r\n\r\nUsage: `string | lowerCase`\r\n\r\n```html\r\n{{ 'Convert TO LoWeR-case' | lowerCase }}\r\n<!-- Returns 'convert to lower-case' -->\r\n```\r\n\r\n\r\n### pascalCase\r\n\r\nConverts a string to pascal case and strips hyphens, underscores and whitespaces.\r\n\r\nUsage: `string | pascalCase`\r\n\r\n```html\r\n{{ 'convert_to PASCAL-case' | pascalCase }}\r\n<!-- Returns 'ConvertToPascalCase' -->\r\n```\r\n\r\n\r\n### sentenceCase\r\n\r\nConverts a string to sentence case.\r\n\r\nUsage: `string | sentenceCase`\r\n\r\n```html\r\n{{ 'convert TO Sentence case.' | sentenceCase }}\r\n<!-- Returns 'Convert to sentence case.' -->\r\n```\r\n\r\n\r\n### slugify\r\n\r\nSlugifies a given string with an optional char separator.\r\nDefault separator char is hyphen '-'.\\\r\nSpecial characters are stripped from string.\r\n\r\nUsage: `string | slugify[:separator]`\r\n\r\n```html\r\n{{ 'this_-is__a - string!' | slugify:'_' }}\r\n<!-- Returns 'this_is_a_string' -->\r\n```\r\n\r\n\r\n### split\r\n\r\nSplits a given string into an array of sub-strings using an optional delimiter.\\\r\nDefault delimiter is space ' '.\\\r\nOptionally, you may also specify a limit (integer) on the number of splits.\r\n\r\nUsage: `string | split[:delimiter][:limit]`\r\n\r\n```html\r\n{{ 'This_is_a_string_separated_with_underscore' | split:'_':4 }}\r\n<!-- Returns ['This', 'is', 'a', 'string'] -->\r\n```\r\n\r\n\r\n### titleCase\r\n\r\nConverts a string to titleCase case.\r\n\r\nUsage: `string | titleCase`\r\n\r\n```html\r\n{{ 'convert TO title cASE.' | titleCase }}\r\n<!-- Returns 'Convert To Title Case.' -->\r\n```\r\n\r\n\r\n### trim\r\n\r\nStrips the leading and trailing whitespaces from a given string.\r\n\r\nUsage: `string | trim`\r\n\r\n```html\r\n{{ ' This is a test string!  ' | trim }}\r\n<!-- Returns 'This is a test string!' -->\r\n```\r\n\r\n\r\n### trimLeft\r\n\r\nStrips the leading whitespaces from a given string.\r\n\r\nUsage: `string | trimLeft`\r\n\r\n```html\r\n{{ ' This is a test string!  ' | trimLeft }}\r\n<!-- Returns 'This is a test string!  ' -->\r\n```\r\n\r\n\r\n### trimRight\r\n\r\nStrips the trailing whitespaces from a given string.\r\n\r\nUsage: `string | trimRight`\r\n\r\n```html\r\n{{ ' This is a test string!  ' | trimRight }}\r\n<!-- Returns ' This is a test string!' -->\r\n```\r\n\r\n\r\n### upperCase\r\n\r\nConverts a given string to upper case.\r\n\r\nUsage: `string | upperCase`\r\n\r\n```html\r\n{{ 'Convert TO UpPeR-case.' | upperCase }}\r\n<!-- Returns 'CONVERT TO UPPER-CASE.' -->\r\n```\r\n\r\n\r\n## Number Pipes\r\n\r\nA collection of pipes exported by `NglrxNumberPipesModule`.\r\n\r\n\r\n### abs\r\n\r\nReturns the absolute value of given number.\r\n\r\nUsage: `number | abs`\r\n\r\n```html\r\n{{ -384 | abs }}\r\n<!-- Returns 384 -->\r\n```\r\n\r\n\r\n### avg\r\n\r\nReturns the average of all numbers in a given array.\r\n\r\nUsage: `array | avg`\r\n\r\n```html\r\n{{ [10, 45, 200, 5, 92] | avg }}\r\n<!-- Returns 70.4 -->\r\n```\r\n\r\n\r\n### max\r\n\r\nFinds the maximum from an array of numbers.\r\n\r\nUsage: `array | max`\r\n\r\n```html\r\n{{ [10, 45, 200, 5, 92] | max }}\r\n<!-- Returns 200 -->\r\n```\r\n\r\n\r\n### min\r\n\r\nFinds the minimum from an array of numbers.\r\n\r\nUsage: `array | min`\r\n\r\n```html\r\n{{ [10, 45, 200, 5, 92] | min }}\r\n<!-- Returns 5 -->\r\n```\r\n\r\n\r\n### sum\r\n\r\nReturns the sum of all numbers in a given array.\r\n\r\nUsage: `array | sum`\r\n\r\n```html\r\n{{ [10, 45, 200, 5, 92] | sum }}\r\n<!-- Returns 352 -->\r\n```\r\n\r\n\r\n## Generic Pipes\r\nA collection of pipes exported by `NglrxGenericPipesModule`.\r\n\r\n\r\n### length\r\n\r\nReturns the length of a given string or array.\r\n\r\nUsage: `string-OR-array | length`\r\n\r\n```html\r\n{{ 'This is a test string!' | length }}\r\n<!-- Returns 22 -->\r\n\r\n{{ [10, 45, 200, 50, 92] | length }}\r\n<!-- Returns 5 -->\r\n```\r\n\r\n\r\n### reverse\r\n\r\nReverses a given string or array (of any type).\r\n\r\nUsage: `string-OR-array | reverse`\r\n\r\n```html\r\n{{ 'This is a test string!' | reverse }}\r\n<!-- Returns '!gnirts tset a si sihT' -->\r\n\r\n{{ ['a', 'b', 'c', 'd', 'e'] | reverse }}\r\n<!-- Returns ['e', 'd', 'c', 'b', 'a'] -->\r\n```\r\n\r\n\\\r\nFor more information on pipes, refer to [Angular - pipes](https://angular.io/guide/pipes) documentation.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}